diff --git a/linux-3.19/Makefile b/linux-3.19/Makefile
index b15036b..70f5419 100644
--- a/linux-3.19/Makefile
+++ b/linux-3.19/Makefile
@@ -879,7 +879,7 @@ export mod_sign_cmd
 
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y		+= kernel/ mm/ fs/ ipc/ security/ crypto/ block/
+core-y		+= kernel/ mm/ fs/ ipc/ security/ crypto/ block/ rtnice/
 
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
diff --git a/linux-3.19/arch/x86/syscalls/syscall_64.tbl b/linux-3.19/arch/x86/syscalls/syscall_64.tbl
index 8d656fb..6591430 100644
--- a/linux-3.19/arch/x86/syscalls/syscall_64.tbl
+++ b/linux-3.19/arch/x86/syscalls/syscall_64.tbl
@@ -329,6 +329,7 @@
 320	common	kexec_file_load		sys_kexec_file_load
 321	common	bpf			sys_bpf
 322	64	execveat		stub_execveat
+323	common  rtnice			sys_rtnice
 
 #
 # x32-specific system call numbers start at 512 to avoid cache impact
diff --git a/linux-3.19/include/linux/sched.h b/linux-3.19/include/linux/sched.h
index 8db31ef..4c04f7f 100644
--- a/linux-3.19/include/linux/sched.h
+++ b/linux-3.19/include/linux/sched.h
@@ -1167,6 +1167,7 @@ struct sched_entity {
 	u64			exec_start;
 	u64			sum_exec_runtime;
 	u64			vruntime;
+	long			rtnice;
 	u64			prev_sum_exec_runtime;
 
 	u64			nr_migrations;
diff --git a/linux-3.19/include/linux/syscalls.h b/linux-3.19/include/linux/syscalls.h
index 85893d7..d55b2b5 100644
--- a/linux-3.19/include/linux/syscalls.h
+++ b/linux-3.19/include/linux/syscalls.h
@@ -882,4 +882,5 @@ asmlinkage long sys_execveat(int dfd, const char __user *filename,
 			const char __user *const __user *argv,
 			const char __user *const __user *envp, int flags);
 
+asmlinkage long sys_rtnice(int pid, long val);
 #endif
diff --git a/linux-3.19/kernel/sched/core.c b/linux-3.19/kernel/sched/core.c
index 5eab11d..3b338f8 100644
--- a/linux-3.19/kernel/sched/core.c
+++ b/linux-3.19/kernel/sched/core.c
@@ -1836,6 +1836,7 @@ static void __sched_fork(unsigned long clone_flags, struct task_struct *p)
 	p->se.prev_sum_exec_runtime	= 0;
 	p->se.nr_migrations		= 0;
 	p->se.vruntime			= 0;
+	p->se.rtnice			= 0;
 	INIT_LIST_HEAD(&p->se.group_node);
 
 #ifdef CONFIG_SCHEDSTATS
diff --git a/linux-3.19/kernel/sched/fair.c b/linux-3.19/kernel/sched/fair.c
index fe331fc..202e3ce 100644
--- a/linux-3.19/kernel/sched/fair.c
+++ b/linux-3.19/kernel/sched/fair.c
@@ -456,7 +456,15 @@ static inline u64 min_vruntime(u64 min_vruntime, u64 vruntime)
 static inline int entity_before(struct sched_entity *a,
 				struct sched_entity *b)
 {
-	return (s64)(a->vruntime - b->vruntime) < 0;
+	if ((a->rtnice - b->rtnice) > 0) {
+		return 1;
+	}
+	else if ((a->rtnice - b->rtnice) < 0) {
+		return 0;
+	}
+	else {
+		return (s64)(a->vruntime - b->vruntime) < 0;
+	}
 }
 
 static void update_min_vruntime(struct cfs_rq *cfs_rq)
@@ -712,7 +720,15 @@ static void update_curr(struct cfs_rq *cfs_rq)
 	curr->sum_exec_runtime += delta_exec;
 	schedstat_add(cfs_rq, exec_clock, delta_exec);
 
-	curr->vruntime += calc_delta_fair(delta_exec, curr);
+	if (curr->rtnice == 0) {
+		curr->vruntime += calc_delta_fair(delta_exec, curr);
+	}
+	curr->rtnice -= calc_delta_fair(delta_exec, curr);
+
+	if (curr->rtnice < 0) {
+		curr->rtnice = 0;
+	}
+
 	update_min_vruntime(cfs_rq);
 
 	if (entity_is_task(curr)) {
diff --git a/linux-3.19/rtnice/Makefile b/linux-3.19/rtnice/Makefile
new file mode 100644
index 0000000..ee91de9
--- /dev/null
+++ b/linux-3.19/rtnice/Makefile
@@ -0,0 +1 @@
+obj-y:=rtnice.o
diff --git a/linux-3.19/rtnice/rtnice.c b/linux-3.19/rtnice/rtnice.c
new file mode 100644
index 0000000..09d9eb4
--- /dev/null
+++ b/linux-3.19/rtnice/rtnice.c
@@ -0,0 +1,34 @@
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/sched.h>
+#include <linux/syscalls.h>
+#include <linux/errno.h>
+
+asmlinkage long sys_rtnice(int pid, long val) {
+	long errno;
+	struct task_struct *p;
+	int flag;
+
+	errno = 0;
+
+	if (val < 0) {
+		errno = -EINVAL;
+		return errno;
+	}
+
+	flag = 0;
+	for_each_process(p) {
+		if (p->pid == pid) {
+			flag = 1;
+			p->se.rtnice = val;
+			printk("***** rtnice: %ld *****\n", p->se.rtnice);
+			break;
+		}
+	}
+
+	if (flag == 0) {
+		errno = -ESRCH;
+	}
+
+	return errno;
+}
